getPckg <- function(pckg) install.packages(pckg, repos = "http://cran.r-project.org")
pckg = try(require(twitteR))
if(!pckg) {
cat("Installing 'twitteR' from CRAN\n")
getPckg("twitteR")
require("twitteR")
}
pckg = try(require(maps))
if(!pckg) {
cat("Installing 'maps' from CRAN\n")
getPckg("maps")
require("maps")
}
pckg = try(require(geosphere))
if(!pckg) {
cat("Installing 'geosphere' from CRAN\n")
getPckg("geosphere")
require("geosphere")
}
pckg = try(require(RColorBrewer))
if(!pckg) {
cat("Installing 'RColorBrewer' from CRAN\n")
getPckg("RColorBrewer")
require("RColorBrewer")
}
twitterMap <- function(userName,userLocation=NULL,fileName="twitterMap.pdf",nMax = 1000,plotType=c("followers","both","following")){
# Get location data
cat("Getting data from Twitter, this may take a moment.\n")
tmp = getUser(userName)
if(is.null(userLocation)){
userLocation = location(tmp)
userLocation = trim(userLocation)
if(nchar(userLocation) < 2){stop("We can not find your location from Twitter")}
}
followers=tmp$getFollowers(n=nMax)
followersLocation = sapply(followers,function(x){location(x)})
following = tmp$getFriends(n=nMax)
followingLocation = sapply(following,function(x){location(x)})
# Load the geographic data
data(world.cities)
data(us.cities)
data(canada.cities)
# Find the latitude and longitude of the user
cat("Getting geographic (latitude/longitude) of Twitter users.\n")
userLL <- findLatLon(userLocation)$latlon
if(any(is.na(userLL))){stop("We can't find the latitude and longitude of your location from Twitter")}
# Find the latitude and longitude of each of the followers/following
# and calcualte the distance to the user
followersLL = matrix(NA,nrow=length(followers),ncol=4)
followingLL = matrix(NA,nrow=length(following),ncol=4)
for(i in 1:length(followers)){
if(length(followersLocation[[i]]) > 0){
tmpLL = findLatLon(trim(followersLocation[[i]]))
if(any(!is.na(tmpLL$latlon))){
followersLL[i,] = c(unlist(tmpLL$latlon),distCosine(userLL,tmpLL$latlon),unlist(tmpLL$cont))
}
}
}
for(i in 1:length(following)){
if(length(followingLocation[[i]]) > 0){
tmpLL = findLatLon(trim(followingLocation[[i]]))
if(any(!is.na(tmpLL$latlon))){
followingLL[i,] =  c(unlist(tmpLL$latlon),distCosine(userLL,tmpLL$latlon),unlist(tmpLL$cont))
}
}
}
followingLL = followingLL[order(-followingLL[,3]),]
followersLL = followersLL[order(-followersLL[,3]),]
followingLL = followingLL[!is.na(followingLL[,1]),]
followersLL = followersLL[!is.na(followersLL[,1]),]
cat("Plotting results.\n")
# Set up the colors
cols = brewer.pal(7,"Set2")
# Both followers and following
if(plotType=="both"){
pdf(fileName,height=12,width=10)
data(worldMapEnv)
par(mfrow=c(2,1),mar=rep(0,4))
map('world',col="#191919",bg="black",fill=T,mar=rep(0,4),border=0)
mtext(paste("@",userName," Follower Map",sep=""),col="lightgrey")
nFollowers = dim(followersLL)[1]
for(i in 1:nFollowers){
greatC = getGreatCircle(userLL,followersLL[i,1:2])
lines(greatC,col=cols[followersLL[i,4]],lwd=0.8)
}
legend(-180,0,legend = c(paste("Asia",sum(followersLL[,4]==1)),paste("Africa",sum(followersLL[,4]==2)),paste("N. America",sum(followersLL[,4]==3)),paste("S. America",sum(followersLL[,4]==4)),paste("Australia/N.Z.",sum(followersLL[,4]==5)),paste("Europe",sum(followersLL[,4]==6))),text.col=cols[1:6],bg="black",cex=0.75)
map('world',col="#191919",bg="black",fill=T,mar=rep(0,4),border=0)
mtext(paste("@",userName," Following Map",sep=""),col="lightgrey")
nFollowing = dim(followingLL)[1]
for(i in 1:nFollowing){
greatC = getGreatCircle(userLL,followingLL[i,1:2])
lines(greatC,col=cols[followingLL[i,4]],lwd=0.8)
}
legend(-180,0,legend = c(paste("Asia",sum(followingLL[,4]==1)),paste("Africa",sum(followingLL[,4]==2)),paste("N. America",sum(followingLL[,4]==3)),paste("S. America",sum(followingLL[,4]==4)),paste("Australia/N.Z.",sum(followingLL[,4]==5)),paste("Europe",sum(followingLL[,4]==6))),text.col=cols[1:6],bg="black",cex=0.75)
dev.off()
}
## Just followers
if(plotType=="followers"){
pdf(fileName,height=6,width=10)
data(worldMapEnv)
map('world',col="#191919",bg="black",fill=T,mar=rep(0,4),border=0)
mtext(paste("@",userName," Follower Map",sep=""),col="lightgrey")
nFollowers = dim(followersLL)[1]
for(i in 1:nFollowers){
greatC = getGreatCircle(userLL,followersLL[i,1:2])
lines(greatC,col=cols[followersLL[i,4]],lwd=0.8)
}
legend(-180,0,legend = c(paste("Asia",sum(followersLL[,4]==1)),paste("Africa",sum(followersLL[,4]==2)),paste("N. America",sum(followersLL[,4]==3)),paste("S. America",sum(followersLL[,4]==4)),paste("Australia/N.Z.",sum(followersLL[,4]==5)),paste("Europe",sum(followersLL[,4]==6))),text.col=cols[1:6],bg="black",cex=0.75)
dev.off()
}
## Just following
if(plotType=="following"){
pdf(fileName,height=6,width=10)
data(worldMapEnv)
map('world',col="#191919",bg="black",fill=T,mar=rep(0,4),border=0)
mtext(paste("@",userName," Following Map",sep=""),col="lightgrey")
nFollowing = dim(followingLL)[1]
for(i in 1:nFollowing){
greatC = getGreatCircle(userLL,followingLL[i,1:2])
lines(greatC,col=cols[followingLL[i,4]],lwd=0.8)
}
legend(-180,0,legend = c(paste("Asia",sum(followingLL[,4]==1)),paste("Africa",sum(followingLL[,4]==2)),paste("N. America",sum(followingLL[,4]==3)),paste("S. America",sum(followingLL[,4]==4)),paste("Australia/N.Z.",sum(followingLL[,4]==5)),paste("Europe",sum(followingLL[,4]==6))),text.col=cols[1:6],bg="black",cex=0.75)
dev.off()
}
}
findLatLon <- function(loc){
latlon = NA
cont = NA
# Asia = 1, Africa = 2, North America = 3, South America = 4, Australia/New Zealand = 5, Europe = 6
continents = matrix(NA,nrow=length(unique(world.cities[,2])),ncol=2)
continents[,1] = unique(world.cities[,2])
continents[1:10,2] = c(1,1,1,2,1,1,1,1,1,1)
continents[11:20,2]= c(1,1,2,1,1,2,1,2,2,2)
continents[21:30,2] = c(2,1,6,6,6,6,6,6,6,6)
continents[31:40,2] = c(6,6,6,6,2,4,4,1,2,1)
continents[41:50,2] = c(4,6,1,4,6,1,3,1,6,6)
continents[51:60,2] = c(3,2,4,2,6,1,6,1,3,2)
continents[61:70,2] = c(1,2,2,2,3,6,3,3,6,6)
continents[71:80,2] = c(1,1,2,6,3,4,3,4,6,1)
continents[81:90,2] = c(3,3,3,2,2,6,6,6,6,4)
continents[91:100,2] = c(2,5,2,2,3,1,1,1,1,1)
continents[101:110,2] = c(1,2,1,1,1,3,2,5,1,6)
continents[111:120,2] = c(1,6,1,1,2,6,1,1,6,2)
continents[121:130,2] = c(6,6,6,1,1,3,4,3,4,2)
continents[131:140,2] = c(6,6,2,2,1,1,1,4,1,1)
continents[141:150,2] = c(1,2,2,1,1,1,4,6,6,2)
continents[151:160,2] = c(4,1,1,1,1,2,4,6,2,2)
continents[161:170,2] = c(1,2,2,1,6,2,1,1,6,1)
continents[171:180,2] = c(1,1,1,2,6,2,2,6,1,1)
continents[181:190,2] = c(2,6,2,1,6,6,3,3,3,3)
continents[191:200,2] = c(2,2,2,2,3,2,3,2,3,1)
continents[201:210,2] = c(3,2,2,2,2,2,2,1,6,2)
continents[211:220,2] = c(1,3,1,6,2,4,3,6,3,4)
continents[221:230,2] = c(1,1,1,3,2,3,3,6,1,6)
continents[231:232,2] = c(2,1)
# Get the first element of the location
# firstElement = strsplit(loc,"[^[:alnum:]]")[[1]][1]
firstElement = strsplit(loc,",")[[1]][1]
if(is.na(firstElement)){firstElement="zzzzzzzzz"}
# See if it is a city
tmp = grep(firstElement,world.cities[,1],fixed=TRUE)
tmp2 = grep(firstElement,state.name,fixed=TRUE)
tmp3 = grep(firstElement,world.cities[,2],fixed=TRUE)
if(length(tmp) == 1){
latlon = world.cities[tmp,c(5,4)]
cont = continents[which(world.cities[tmp,2]==continents[,1]),2]
}else if(length(tmp) > 1){
tmpCities = world.cities[tmp,]
latlon = tmpCities[which.max(tmpCities$pop),c(5,4)]
cont = continents[which(tmpCities[which.max(tmpCities$pop),2]==continents[,1]),2]
}else if(length(tmp2) == 1){
latlon = c(state.center$x[tmp2],state.center$y[tmp2])
cont = 3
}else if(length(tmp3) > 0){
tmpCities = world.cities[tmp3,]
latlon = tmpCities[which.max(tmpCities$pop),c(5,4)]
cont = continents[which(tmpCities[which.max(tmpCities$pop),2]==continents[,1]),2]
}
return(list(latlon=latlon,cont=as.numeric(cont)))
}
getGreatCircle = function(userLL,relationLL){
tmpCircle = greatCircle(userLL,relationLL)
start = which.min(abs(tmpCircle[,1] - userLL[1,1]))
end = which.min(abs(tmpCircle[,1] - relationLL[1]))
greatC = tmpCircle[start:end,]
return(greatC)
}
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
install.packages("ROAuth")
install.packages("twitteR")
#Loading the packages
library("ROAuth")
library("twitteR")
library(RCurl)
require(twitteR)
install.packages("ROAuth")
install.packages("twitteR")
utils:::menuInstallPkgs()
x
q()
setwd("C:/Users/Sameer/Desktop")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, destfile="getdata_projectfiles_UCI_HAR_Dataset")
download.file(url, destfile="getdata_projectfiles_UCI_HAR_Dataset.zip")
unz("getdata_projectfiles_UCI_HAR_Dataset.zip", "household_power_consumption")
?unz
unz("getdata_projectfiles_UCI_HAR_Dataset.zip", "household_power_consumption.dat")
unzip("getdata_projectfiles_UCI_HAR_Dataset.zip")
?readlines
?readLines
fileName="C:/Users/Sameer/Desktop/UCI HAR Dataset/test/subject_test.txt"
fileName
con=file(fileName,open="r")
con
line=readLines(con)
line
length(line)
class(lines)
class(line)
close(con)
fileName="C:/Users/Sameer/Desktop/UCI HAR Dataset/test/X_test.txt"
con=file(fileName,open="r")
line=readLines(con)
line
length(line)
fileName="C:/Users/Sameer/Desktop/UCI HAR Dataset/test/subject_test.txt"
con=file(fileName,open="r")
line=readLines(con)
length(line)
fileName="C:/Users/Sameer/Desktop/UCI HAR Dataset/test/Y_test.txt"
con=file(fileName,open="r")
line=readLines(con)
length(lione)
con=file(fileName,open="r")
line=readLines(con)
length(line)
list.files("C:/Users/Sameer/Desktop/UCI HAR Dataset/test")
list.files("C:/Users/Sameer/Desktop/UCI HAR Dataset/test",pattern="txt$")
library(plyr)
library(lattice)
Activity<-read.csv("C:/Users/Sameer/RepData_PeerAssessment1/activity.csv")
Activity_Clean<-Activity[-which(is.na(Activity$steps)),]
mn_steps<-mean(Activity_Clean$steps)
mn_steps
Activity_Smry<-ddply(Activity_Clean,
c("date"),
summarise,
Mean_Step=mean(steps),
Median_Step=median(steps),
Tot_Steps=sum(steps))
hist(Activity_Smry$Tot_Steps,
breaks=nrow(Activity_Smry),
xlab="Steps",
main="Frequency of Total Number Of Steps per day/ Plot 1")
mean(Activity_Smry$Tot_Steps)
median(Activity_Smry$Tot_Steps)
Activity_interval_Smry<-ddply(Activity_Clean,c("interval"),summarise,Mean_Step=mean(steps))
plot(x=Activity_interval_Smry$interval,
y=Activity_interval_Smry$Mean_Step,
type="l",xlab="interval",
ylab="mean Steps")
abline(v=Activity_interval_Smry[which(Activity_interval_Smry$Mean_Step==max(Activity_interval_Smry$Mean_Step)),"interval"])
Activity_interval_Smry[which(Activity_interval_Smry$Mean_Step==max(Activity_interval_Smry$Mean_Step)),"interval"]
tot_missing_values<-length(which(is.na(Activity$steps)))
tot_missing_values
##Activity[which(is.na(Activity$steps)),"steps"]
Activity = transform(Activity, steps = ifelse(is.na(steps), mean(Activity[Activity$interval==interval,"steps"], na.rm=TRUE), steps))
for (i in 1:nrow(Activity))
{
if(is.na(Activity[i,"steps"]))
{
Activity[i,"steps"]=Activity_interval_Smry[which(Activity_interval_Smry$interval==Activity[i,"interval"]),"Mean_Step"]
}
}
Activity_Smry_2<-ddply(Activity,c("date"),
summarise,
Mean_Step=mean(steps),
Median_Step=median(steps),
Tot_Steps=sum(steps))
hist(Activity_Smry_2$Tot_Steps,
breaks=nrow(Activity_Smry),
xlab="Steps",
main="Frequency of Total Number Of Steps per day/ Plot 2")
#######################################################################
Activity$day <- ifelse(weekdays(as.Date(Activity$date)) %in% c("Saturday","Sunday"),
"weekend","weekday")
#######################################################################
Activity$day<-as.factor(Activity$day)
ActSmry_Day_Intvl<-ddply(Activity,
c("interval","day"),
summarise,
Mean_Step=mean(steps),
Median_Step=median(steps),
Tot_Steps=sum(steps))
ActSmry_Day_Intvl$Standardised_Steps<- as.numeric(scale(ActSmry_Day_Intvl$Mean_Step,
center = TRUE, scale = TRUE))
xyplot(Standardised_Steps ~ interval|day,
group=day,
data=ActSmry_Day_Intvl,
ylab='Number of steps',
xlab='Interval',
panel=panel.superpose,
distribute.type=TRUE, layout = c(1, 2),
col="blue", lwd=1, type='l')
library(plyr)
library(lattice)
Activity<-read.csv("C:/Users/Sameer/RepData_PeerAssessment1/activity.csv")
Activity_Clean<-Activity[-which(is.na(Activity$steps)),]
mn_steps<-mean(Activity_Clean$steps)
mn_steps
Activity_Smry<-ddply(Activity_Clean,
c("date"),
summarise,
Mean_Step=mean(steps),
Median_Step=median(steps),
Tot_Steps=sum(steps))
hist(Activity_Smry$Tot_Steps,
breaks=nrow(Activity_Smry),
xlab="Steps",
main="Frequency of Total Number Of Steps per day-Plot 1")
mean(Activity_Smry$Tot_Steps)
median(Activity_Smry$Tot_Steps)
Activity_interval_Smry<-ddply(Activity_Clean,c("interval"),summarise,Mean_Step=mean(steps))
plot(x=Activity_interval_Smry$interval,
y=Activity_interval_Smry$Mean_Step,
type="l",xlab="interval",
ylab="mean Steps")
abline(v=Activity_interval_Smry[which(Activity_interval_Smry$Mean_Step==max(Activity_interval_Smry$Mean_Step)),"interval"])
Activity_interval_Smry[which(Activity_interval_Smry$Mean_Step==max(Activity_interval_Smry$Mean_Step)),"interval"]
max(Activity_interval_Smry$Mean_Step)
Activity = transform(Activity, steps = ifelse(is.na(steps), mean(Activity[Activity$interval==interval,"steps"], na.rm=TRUE), steps))
View(Activity)
Activity_1 = transform(Activity, steps = ifelse(is.na(steps), mean(Activity[Activity$interval==interval,"steps"], na.rm=TRUE), steps))
for (i in 1:nrow(Activity))
{
if(is.na(Activity[i,"steps"]))
{
Activity[i,"steps"]=Activity_interval_Smry[which(Activity_interval_Smry$interval==Activity[i,"interval"]),"Mean_Step"]
}
}
View(Activity_1)
View(Activity)
nrow(Activity)
nrow(Activity_1)
Mean_New<-mean(Activity_Smry_2$Tot_Steps)
Median_New<-median(Activity_Smry_2$Tot_Steps)
Activity_Smry_2<-ddply(Activity,c("date"),
summarise,
Mean_Step=mean(steps),
Median_Step=median(steps),
Tot_Steps=sum(steps))
Mean_New<-mean(Activity_Smry_2$Tot_Steps)
Median_New<-median(Activity_Smry_2$Tot_Steps)
Mean_New
Median_New
Mean
Mean<-mean(Activity_Smry$Tot_Steps)
Median<-median(Activity_Smry$Tot_Steps)
Mean
Median
Activity$day <- ifelse(weekdays(as.Date(Activity$date)) %in% c("Saturday","Sunday"),
"weekend","weekday")
Activity$day<-as.factor(Activity$day)
ActSmry_Day_Intvl<-ddply(Activity,
c("interval","day"),
summarise,
Mean_Step=mean(steps),
Median_Step=median(steps),
Tot_Steps=sum(steps))
ActSmry_Day_Intvl$Standardised_Steps<- as.numeric(scale(ActSmry_Day_Intvl$Mean_Step,
center = TRUE, scale = TRUE))
xyplot(Standardised_Steps ~ interval|day,
group=day,
data=ActSmry_Day_Intvl,
ylab='Number of steps',
xlab='Interval',
panel=panel.superpose,
distribute.type=TRUE, layout = c(1, 2),
col="blue", lwd=1, type='l')
library(knitr)
setwd("C:/Users/Sameer/RepData_PeerAssessment1")
knit2html("Peer_Assessment_1.rmd")
browseURL("Peer_Assessment_1.html")
library(knitr)
setwd("C:/Users/Sameer/RepData_PeerAssessment1")
knit2html("PA1_template.rmd")
browseURL("PA1_template.html")
